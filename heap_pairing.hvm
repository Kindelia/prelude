// Pairing Heap implementation based on Okasaki's book

// From (Okasaki, 1998): "Pairing heaps are heap-ordered multiway trees"
// Each tree node contains an element and a list of heaps

// type PHeap = Empty | (Tree element [heap list])

// Merge
(PHeap.merge Empty h) = h
(PHeap.merge h Empty) = h
(PHeap.merge (Tree x hs1) (Tree y hs2)) = (PHeap.merge.aux (<= x y) (Tree x hs1) (Tree y hs2))
    (PHeap.merge.aux 1 (Tree x hs1) (Tree y hs2)) = (Tree x (Cons (Tree y hs2) hs1))
    (PHeap.merge.aux 0 (Tree x hs1) (Tree y hs2)) = (Tree y (Cons (Tree x hs1) hs2))

// Singleton heap
(PHeap.singleton x) = (Tree x Nil)

// Insert
(PHeap.insert x h) = (PHeap.merge (PHeap.singleton x) h)

// Helper function for deleteMin. It merges children heaps in pairs from left to right,
// then merges the resulting heaps from right to left.
(PHeap.mergePairs Nil) = Empty
(PHeap.mergePairs [h]) = h
(PHeap.mergePairs (Cons h1 (Cons h2 hs))) = (PHeap.merge (PHeap.merge h1 h2) (PHeap.mergePairs hs))

// Delete minimum element
(PHeap.deleteMin Empty) = Empty
(PHeap.deleteMin (Tree x hs)) = (PHeap.mergePairs hs)

// Find minimum element
(PHeap.findMin Empty) = (Maybe.None)
(PHeap.findMin (Tree x hs)) = x

// Constructs a pairing heap from a list
(PHeap.fromList Nil) = Empty
(PHeap.fromList (Cons x xs)) = (PHeap.merge (PHeap.singleton x) (PHeap.fromList xs))

(Main) = 
    let heap1 = (PHeap.fromList [1,2,3])
    let heap2 = (PHeap.fromList [6,5,4])
    (PHeap.merge heap1 heap2)