//* Sortable Collection using Bottom-Up MergeSort

// This collection is represented as a list of ordered lists and its total size
// Every ordered list will have distinct sizes. More precisely, a power-of-2 size
// P.S.: We use the term Set instead of Collection on the code, for brevity

// Based on Chris Okasaki's "Purely Functional Data Structures", Chapter 3.5.2 - 1996

//* Type definitions
// type List<A: Type> {
//     List.Nil
//     List.Cons(head: A, tail: List<A>)
// }

// type SortSet<A: Type> {
//     (segments: List<List<A>>, size: Nat)
// }


//* Helper Functions

// Left cummulative fold
(List.foldl f c  Nil       ) = c
(List.foldl f c (Cons x xs)) = (List.foldl f (f c x) xs)

// Decreasing Range:
// Creates a range from n-1 to 0
(DecRange 0) = Nil
(DecRange n) =
    let dec = (- n 1)
    (Cons dec (DecRange dec))


//* Sorted Collection Functions

// Merges two ordered lists
// Merge(xs: List, ys: List) -> List
(Merge Nil ys) = ys
(Merge xs Nil) = xs
(Merge (Cons x xs) (Cons y ys)) = (Merge.aux (< x y) (Cons x xs) (Cons y ys))
    (Merge.aux 1 (Cons x xs) ys) = (Cons x (Merge xs ys))
    (Merge.aux 0 xs (Cons y ys)) = (Cons y (Merge xs ys))

// Constructs an empty Sorted Set
(SortSet.Empty) = (SortSet 0 Nil)

// Adds an element to the Set
// Add(x: A, z: SortSet<A>) -> SortSet<A>
(SortSet.add x (SortSet size segs)) = (SortSet (+ size 1) (InsertSeg (Cons x Nil) segs size))

(InsertSeg seg segs size) = (InsertSeg.aux (% size 2) seg segs size)
    (InsertSeg.aux 0 seg  segs       size) = (Cons seg segs)
    (InsertSeg.aux 1 seg (Cons x xs) size) = (InsertSeg (Merge seg x) xs (>> size 1))

// Sorts the elements of the Set
// Sort(x: SortSet<A>) -> List<A>
(SortSet.sort (SortSet _ segs)) = (List.foldl @x @y(Merge x y) Nil segs)


(Main n) =
    let set = (List.foldl
        @x @y(SortSet.add y x)
        SortSet.Empty
        (DecRange n)
    )

    (SortSet.sort set)
